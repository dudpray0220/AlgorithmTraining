/**
 * [문제 요약]
 * - 0과 1로만 이루어진 문자열 S가 주어짐
 * - 연속된 하나 이상의 숫자를 잡고 모두 뒤집기(0→1, 1→0) 가능
 * - 모든 숫자를 같게 만들기 위한 최소 행동 횟수 구하기
 *
 * [문제 해결 방법]
 * 1. 모든 숫자를 0으로 바꾸는 경우: 연속된 1의 그룹 수를 세기
 * 2. 모든 숫자를 1로 바꾸는 경우: 연속된 0의 그룹 수를 세기
 * 3. 두 경우 중 최소값이 정답
 *
 * [예시]
 * S = "0001100"
 * - 모든 숫자를 0으로: 연속된 1의 그룹은 1개 -> 1번 뒤집기
 * - 모든 숫자를 1로: 연속된 0의 그룹은 2개 -> 2번 뒤집기
 * 따라서 최소 행동 횟수는 1
 *
 * @param {string} s - 0과 1로만 이루어진 문자열
 * @return {number} - 모든 숫자를 같게 만들기 위한 최소 행동 횟수
 */

function flipStringToMakeEqual(s) {
  // 문자열이 비어있거나 길이가 1인 경우 이미 모든 숫자가 같음
  if (s.length <= 1) return 0;

  let countToZero = 0; // 모두 0으로 만들기 위한 뒤집기 횟수
  let countToOne = 0; // 모두 1로 만들기 위한 뒤집기 횟수

  // 연속된 1의 그룹 수 세기 (0으로 만들기 위함)
  for (let i = 0; i < s.length; i++) {
    if (s[i] === '1' && (i === 0 || s[i - 1] === '0')) {
      countToZero++;
    }
  }

  // 연속된 0의 그룹 수 세기 (1로 만들기 위함)
  for (let i = 0; i < s.length; i++) {
    if (s[i] === '0' && (i === 0 || s[i - 1] === '1')) {
      countToOne++;
    }
  }

  // 두 경우 중 최소값 반환
  return Math.min(countToZero, countToOne);
}

// 예시 테스트
console.log(flipStringToMakeEqual('0001100')); // 출력: 1
