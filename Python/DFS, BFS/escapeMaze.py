# [문제 요약]
# - N × M 크기의 직사각형 미로에 갇힌 동빈이가 탈출하기 위한 최소 이동 칸 수 계산
# - 동빈이 위치는 (1, 1), 출구는 (N, M)
# - 괴물이 있는 부분은 0, 괴물이 없는 부분은 1로 표시됨
# - 동빈이는 1로 표시된 부분만 이동 가능
# - 인접한 칸으로 한 번에 한 칸씩 이동 가능 (상하좌우)
# - 시작 칸과 마지막 칸도 카운트에 포함
#
# [입력 조건]
# - 첫째 줄에 두 정수 N, M(4 ≤ N, M ≤ 200)이 주어집니다.
# - 다음 N개의 줄에는 각각 M개의 정수(0 또는 1)로 미로의 정보가 주어짐
# - 시작 칸과 마지막 칸은 항상 1
#
# [출력 조건]
# - 첫째 줄에 최소 이동 칸의 개수를 출력
#
# [핵심 아이디어]
# 1. 이차원 배열을 이용하므로 미로정보를 이차원배열로 전환!
# 2. 방문 거리 저장할 이차원 배열 생성!
# 즉, 두 개의 2차원 배열을 사용!

# 최소칸이므로 BFS -> deque 라이브러리 사용!
from collections import deque

# n, m을 공백으로 구분하여 입력받기
n, m = map(int, input().split())

# 2차원 리스트의 맵 정보 입력 받기
graph = []
for _ in range(5):
    graph.append(list(map(int, input())))

# 상, 하, 좌, 우 이동이 가능하므로 이동할 네 방향 정의
dx = [-1, 1, 0, 0]
dy = [0, 0, -1, 1]


# BFS 소스코드 구현
def bfs(x, y):
    # 큐 구현을 위해 deque 라이브러리 사용
    queue = deque()
    queue.append((x, y))

    # 큐가 빌 때 까지 반복
    while queue:
        x, y = queue.popleft()

        # 현재 위치에서 네 방향으로의 위치 확인
        for i in range(4):
            nx = x + dx[i]
            ny = y + dy[i]

            # 미로 찾기 공간을 벗어난 경우 무시
            if nx < 0 or ny < 0 or nx >= n or ny >= m:
                continue

            # 괴물이 있으면 무시
            if graph[nx][ny] == 0:
                continue

            # 해당 노드를 처음 방문하는 경우에만 최단 거리 기록
            # 그래프엔 "최단 거리"가 기록됨! 즉, 각 칸에는 "거기까지 가는데 몇 칸 걸렸는지"가 저장!
            if graph[nx][ny] == 1:
                graph[nx][ny] = graph[x][y] + 1  # 지금까지 걸은 칸 수 + 1
                queue.append((nx, ny))

    # 가장 오른쪽 아래까지의 최단 거리 반환 (인덱스는 0부터 시작하니까)
    return graph[n - 1][m - 1]


# BFS를 수행한 결과 출력
print(bfs(0, 0))
