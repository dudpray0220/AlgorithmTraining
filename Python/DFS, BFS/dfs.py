INF = 999999999  # 무한의 비용 선언

# 인접 행렬 방식: 2차원 배열에 각 노드가 연결된 형태를 기록하는 방식
# 다른 언어의 배열을 파이썬에서는 리스트 자료형으로 표현할 수 있으므로 파이썬은 인접 행렬을 리스트로 구현한다!
# 2차원 리스트를 이용해 인접 행렬 표현
graph = [[0, 7, 5], [7, 0, INF], [5, INF, 0]]
print(graph)

# 인접 리스트 방식: 파이썬은 단순히 2차원 리스트를 이용하면 된다!
# 행이 3개인 2차원 리스트로 인접 리스트 표현
graph = [[] for _ in range(3)]

# 노드 0에 연결된 노드 정보 저장 (노드, 거리)
graph[0].append((1, 7))
graph[0].append((2, 5))

# 노드 1에 연결된 노드 정보 저장 (노드, 거리)
graph[1].append((0, 7))

# 노드 2에 연결된 노드 정보 저장 (노드, 거리)
graph[2].append((0, 5))

print(graph)


# DFS는 스택 자료구조를 이용하며 구체적인 동작 과정은 아래와 같다
# 1. 탐색 시작 노드를 스택에 삽입하고 방문처리를 한다
# 2. 스택의 최상단 노드에 방문하지 않은 노드가 있으면 그 인접 노드를 스택에 넣고 방문처리를 한다. 방문하지 않은 인접 노드가 없으면 스택에서 최상단 노드를 꺼낸다.
# 3. 2번의 과정을 더 이상 수행할 수 없을 때까지 반복한다.
# 일반적으로 인접한 노드 중에서 방문하지 않은 노드가 여러 개 있으면 번호가 낮은 순서부터 처리한다.


# DFS 메서드 정의
def dfs(graph, v, visited):
    # 현재 노드를 방문처리
    visited[v] = True
    print(v, end=" ")

    # 현재 노드와 연결된 다른 노드를 재귀적으로 방문
    for i in graph[v]:
        if not visited[i]:
            dfs(graph, i, visited)


# 각 노드가 연결된 정보를 리스트 자료형으로 표현 (2차원 리스트) (0번 노드는 사용하지 않음)
graph = [[], [2, 3, 8], [1, 7], [1, 4, 5], [3, 5], [3, 4], [7], [2, 6, 8], [1, 7]]

# 각 노드가 방문된 정보를 리스트 자료형으로 표현 (1차원 리스트)
visited = [False] * 9  # 노드 개수만큼 (0번은 무시)

# 정의된 DFS 함수 호출
dfs(graph, 1, visited)

# 흐름 이해 (예 6번)
# 6번에서 더 이상 갈 곳 없으니 → 백트래킹! (재귀 스택에서 빠져나감) → 다시 7번으로 되돌아가서 나머지 작업 마저 함
